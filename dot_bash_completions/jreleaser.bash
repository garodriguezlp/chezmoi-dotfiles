#!/usr/bin/env bash
#
# jreleaser Bash Completion
# =======================
#
# Bash completion support for the `jreleaser` command,
# generated by [picocli](https://picocli.info/) version 4.7.6.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `jreleaser [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'jreleaser (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_jreleaser finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_jreleaser() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} env" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} init" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} download" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} assemble" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} changelog" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} checksum" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sign" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} deploy" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} upload" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} release" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} prepare" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} package" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} publish" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} announce" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} full-release" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generate-completion" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} json-schema" ];    then _picocli_jreleaser; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template generate" ];    then _picocli_jreleaser_template; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template eval" ];    then _picocli_jreleaser_template; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(env)
  local cmds1=(init)
  local cmds2=(config)
  local cmds3=(template)
  local cmds4=(download)
  local cmds5=(assemble)
  local cmds6=(changelog)
  local cmds7=(catalog)
  local cmds8=(checksum)
  local cmds9=(sign)
  local cmds10=(deploy)
  local cmds11=(upload)
  local cmds12=(release)
  local cmds13=(prepare)
  local cmds14=(package)
  local cmds15=(publish)
  local cmds16=(announce)
  local cmds17=(full-release)
  local cmds18=(generate-completion)
  local cmds19=(json-schema)
  local cmds20=(template generate)
  local cmds21=(template eval)

  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_jreleaser_template_eval; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_jreleaser_template_generate; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_jreleaser_jsonschema; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_jreleaser_generatecompletion; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_jreleaser_fullrelease; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_jreleaser_announce; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_jreleaser_publish; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_jreleaser_package; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_jreleaser_prepare; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_jreleaser_release; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_jreleaser_upload; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_jreleaser_deploy; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_jreleaser_sign; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_jreleaser_checksum; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_jreleaser_catalog; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_jreleaser_changelog; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_jreleaser_assemble; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_jreleaser_download; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_jreleaser_template; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_jreleaser_config; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_jreleaser_init; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_jreleaser_env; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_jreleaser; return $?;
}

# Generates completions for the options and subcommands of the `jreleaser` command.
function _picocli_jreleaser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="env init config template download assemble changelog catalog checksum sign deploy upload release prepare package publish announce full-release generate-completion json-schema"
  local flag_opts="-h --help -V --version"
  local arg_opts="-D"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `env` subcommand.
function _picocli_jreleaser_env() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-D"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `init` subcommand.
function _picocli_jreleaser_init() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -o --overwrite -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -f --format"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--format)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_jreleaser_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -f --full --announce -a --assembly --changelog -d --download -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `template` subcommand.
function _picocli_jreleaser_template() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="generate eval"
  local flag_opts="-h --help -V --version"
  local arg_opts="-D"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_jreleaser_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -d --downloader -dn --downloader-name -xd --exclude-downloader -xdn --exclude-downloader-name"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -d|--downloader)
      return
      ;;
    -dn|--downloader-name)
      return
      ;;
    -xd|--exclude-downloader)
      return
      ;;
    -xdn|--exclude-downloader-name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `assemble` subcommand.
function _picocli_jreleaser_assemble() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -s --assembler -d --distribution -xs --exclude-assembler -xd --exclude-distribution"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -s|--assembler)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -xs|--exclude-assembler)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `changelog` subcommand.
function _picocli_jreleaser_changelog() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `catalog` subcommand.
function _picocli_jreleaser_catalog() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform --distribution --cataloger -y --deployer -yn --deployer-name --exclude-distribution --exclude-cataloger -xy --exclude-deployer -xyn --exclude-deployer-name"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    --distribution)
      return
      ;;
    --cataloger)
      return
      ;;
    -y|--deployer)
      return
      ;;
    -yn|--deployer-name)
      return
      ;;
    --exclude-distribution)
      return
      ;;
    --exclude-cataloger)
      return
      ;;
    -xy|--exclude-deployer)
      return
      ;;
    -xyn|--exclude-deployer-name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `checksum` subcommand.
function _picocli_jreleaser_checksum() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -xd --exclude-distribution"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sign` subcommand.
function _picocli_jreleaser_sign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -xd --exclude-distribution"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `deploy` subcommand.
function _picocli_jreleaser_deploy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -y --deployer -yn --deployer-name -xy --exclude-deployer -xyn --exclude-deployer-name"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -y|--deployer)
      return
      ;;
    -yn|--deployer-name)
      return
      ;;
    -xy|--exclude-deployer)
      return
      ;;
    -xyn|--exclude-deployer-name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload` subcommand.
function _picocli_jreleaser_upload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -u --uploader -un --uploader-name -d --distribution --cataloger -xu --exclude-uploader -xun --exclude-uploader-name -xd --exclude-distribution --exclude-cataloger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -u|--uploader)
      return
      ;;
    -un|--uploader-name)
      return
      ;;
    -d|--distribution)
      return
      ;;
    --cataloger)
      return
      ;;
    -xu|--exclude-uploader)
      return
      ;;
    -xun|--exclude-uploader-name)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    --exclude-cataloger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `release` subcommand.
function _picocli_jreleaser_release() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --dry-run --auto-config --project-snapshot-full-changelog --prerelease --draft --overwrite --update --skip-tag --skip-release --skip-checksums --changelog-formatted --signing-enabled --signing-armored -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -y --deployer -yn --deployer-name -u --uploader -un --uploader-name --cataloger -xd --exclude-distribution -xy --exclude-deployer -xyn --exclude-deployer-name -xu --exclude-uploader -xun --exclude-uploader-name --exclude-cataloger --project-name --project-version --project-version-pattern --project-snapshot-pattern --project-snapshot-label --project-copyright --project-description --project-inception-year --project-stereotype --author --tag-name --previous-tag-name --release-name --milestone-name --prerelease-pattern --update-section --branch --changelog --username --commit-author-name --commit-author-email --file --glob"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -y|--deployer)
      return
      ;;
    -yn|--deployer-name)
      return
      ;;
    -u|--uploader)
      return
      ;;
    -un|--uploader-name)
      return
      ;;
    --cataloger)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    -xy|--exclude-deployer)
      return
      ;;
    -xyn|--exclude-deployer-name)
      return
      ;;
    -xu|--exclude-uploader)
      return
      ;;
    -xun|--exclude-uploader-name)
      return
      ;;
    --exclude-cataloger)
      return
      ;;
    --project-name)
      return
      ;;
    --project-version)
      return
      ;;
    --project-version-pattern)
      return
      ;;
    --project-snapshot-pattern)
      return
      ;;
    --project-snapshot-label)
      return
      ;;
    --project-copyright)
      return
      ;;
    --project-description)
      return
      ;;
    --project-inception-year)
      return
      ;;
    --project-stereotype)
      return
      ;;
    --author)
      return
      ;;
    --tag-name)
      return
      ;;
    --previous-tag-name)
      return
      ;;
    --release-name)
      return
      ;;
    --milestone-name)
      return
      ;;
    --prerelease-pattern)
      return
      ;;
    --update-section)
      return
      ;;
    --branch)
      return
      ;;
    --changelog)
      return
      ;;
    --username)
      return
      ;;
    --commit-author-name)
      return
      ;;
    --commit-author-email)
      return
      ;;
    --file)
      return
      ;;
    --glob)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `prepare` subcommand.
function _picocli_jreleaser_prepare() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -p --packager -xd --exclude-distribution -xp --exclude-packager"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -p|--packager)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    -xp|--exclude-packager)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `package` subcommand.
function _picocli_jreleaser_package() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -p --packager -xd --exclude-distribution -xp --exclude-packager"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -p|--packager)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    -xp|--exclude-packager)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `publish` subcommand.
function _picocli_jreleaser_publish() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -d --distribution -p --packager -xd --exclude-distribution -xp --exclude-packager"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -p|--packager)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    -xp|--exclude-packager)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `announce` subcommand.
function _picocli_jreleaser_announce() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -a --announcer -xa --exclude-announcer"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -a|--announcer)
      return
      ;;
    -xa|--exclude-announcer)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `full-release` subcommand.
function _picocli_jreleaser_fullrelease() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --dry-run -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform -y --deployer -yn --deployer-name -u --uploader -un --uploader-name -d --distribution -p --packager -a --announcer --cataloger -xy --exclude-deployer -xyn --exclude-deployer-name -xu --exclude-uploader -xun --exclude-uploader-name -xd --exclude-distribution -xp --exclude-packager -xa --exclude-announcer --exclude-cataloger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    -y|--deployer)
      return
      ;;
    -yn|--deployer-name)
      return
      ;;
    -u|--uploader)
      return
      ;;
    -un|--uploader-name)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -p|--packager)
      return
      ;;
    -a|--announcer)
      return
      ;;
    --cataloger)
      return
      ;;
    -xy|--exclude-deployer)
      return
      ;;
    -xyn|--exclude-deployer-name)
      return
      ;;
    -xu|--exclude-uploader)
      return
      ;;
    -xun|--exclude-uploader-name)
      return
      ;;
    -xd|--exclude-distribution)
      return
      ;;
    -xp|--exclude-packager)
      return
      ;;
    -xa|--exclude-announcer)
      return
      ;;
    --exclude-cataloger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-completion` subcommand.
function _picocli_jreleaser_generatecompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `json-schema` subcommand.
function _picocli_jreleaser_jsonschema() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-D"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate` subcommand.
function _picocli_jreleaser_template_generate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -o --overwrite -sn --snapshot -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -a --announcer -st --assembler-type -s --assembler-name -d --distribution -p --packager -dt --distribution-type"
  local type_option_args=("BINARY" "FLAT_BINARY" "JAVA_BINARY" "JLINK" "SINGLE_JAR" "NATIVE_IMAGE" "NATIVE_PACKAGE") # --distribution-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -a|--announcer)
      return
      ;;
    -st|--assembler-type)
      return
      ;;
    -s|--assembler-name)
      return
      ;;
    -d|--distribution)
      return
      ;;
    -p|--packager)
      return
      ;;
    -dt|--distribution-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `eval` subcommand.
function _picocli_jreleaser_template_eval() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-g --debug -i --info -w --warn -q --quiet -grs --git-root-search --strict -scp --select-current-platform --announce -a --assembly --changelog -d --download -o --overwrite -h --help -V --version"
  local arg_opts="-D -b --basedir -od --output-directory -c --config-file -P --set-property -sp --select-platform -rp --reject-platform --input-file --input-directory --target-directory"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -D)
      return
      ;;
    -b|--basedir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -od|--output-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -P|--set-property)
      return
      ;;
    -sp|--select-platform)
      return
      ;;
    -rp|--reject-platform)
      return
      ;;
    --input-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --input-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --target-directory)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `jreleaser`, `jreleaser.sh`, and `jreleaser.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_jreleaser` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_jreleaser -o default jreleaser jreleaser.sh jreleaser.bash

